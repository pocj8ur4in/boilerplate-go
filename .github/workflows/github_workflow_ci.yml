name: CI

on:
    push:
        branches: [main, master, develop]
    pull_request:
        branches: [main, master, develop]

env:
    GO_VERSION: "1.23.6"

permissions:
    contents: read
    security-events: write

jobs:
    lint:
        name: Lint & Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v5

            - name: Setup Go
              uses: actions/setup-go@v6
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod', '**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download Go modules
              run: go mod download

            - name: Install golangci-lint
              run: |
                  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0
                  echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

            - name: Run golangci-lint
              run: golangci-lint run --timeout=10m

            - name: Run Go tests
              run: go test -race -coverprofile=coverage.out -covermode=atomic $(go list ./... | grep -v /internal/gen/)

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  file: ./coverage.out
                  flags: backend
                  name: codecov-go
                  verbose: true
                  fail_ci_if_error: true
                  threshold: 80

    performance:
        name: Performance Tests
        runs-on: ubuntu-latest
        needs: [lint]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup Go
              uses: actions/setup-go@v6
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run benchmarks
              run: |
                  go test -bench=. -benchmem -run=^$ $(go list ./... | grep -v /internal/gen/) > benchmark.txt
                  cat benchmark.txt

            - name: Upload benchmark results to Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: benchmark-results
                  path: benchmark.txt
                  retention-days: 30

    security:
        name: Security Scan (Gosec, govulncheck, Trivy)
        runs-on: ubuntu-latest
        needs: [lint]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup Go
              uses: actions/setup-go@v6
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Install Gosec Security Scanner
              run: |
                  go install github.com/securego/gosec/v2/cmd/gosec@v2.21.4
                  echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

            - name: Run Gosec Security Scanner
              run: gosec -fmt sarif -out gosec-results.sarif ./...

            - name: Upload Gosec Security Results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "gosec-results.sarif"

            - name: Run govulncheck
              run: |
                  go install golang.org/x/vuln/cmd/govulncheck@v1.1.3
                  govulncheck -json ./... > govulncheck-results.json || true

            - name: Convert govulncheck to SARIF
              run: |
                  echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "govulncheck", "version": "v1.1.3"}}, "results": []}]}' > govulncheck-results.sarif

            - name: Upload govulncheck results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "govulncheck-results.sarif"
            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  target: prod
                  push: false
                  load: true
                  tags: pocj8ur4in/boilerplate-go:prod
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: "pocj8ur4in/boilerplate-go:prod"
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    build:
        name: Build & Artifacts
        runs-on: ubuntu-latest
        needs: [lint, security]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup Go
              uses: actions/setup-go@v6
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Build Go Binary
              run: |
                  CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/boilerplate ./cmd/boilerplate/main.go

            - name: Upload Binary to Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-binary
                  path: |
                      bin/boilerplate
                  retention-days: 7
