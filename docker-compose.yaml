services:
    boilerplate-server:
        build:
            context: .
            dockerfile: Dockerfile
            target: dev
        image: boilerplate-server:dev
        container_name: boilerplate-server
        ports:
            - '38080:8080'
        environment:
            - CGO_ENABLED=1
            - CONFIG_PATH=config.json
        volumes:
            - .:/app
            - ./config.json:/app/config.json
        depends_on:
            boilerplate-postgres:
                condition: service_healthy
            boilerplate-redis:
                condition: service_healthy
        restart: unless-stopped
        networks:
            - boilerplate-network

    boilerplate-swagger:
        image: swaggerapi/swagger-ui:latest
        container_name: boilerplate-swagger
        ports:
            - '38081:8080'
        restart: unless-stopped
        networks:
            - boilerplate-network
        environment:
            URLS_PRIMARY_NAME: boilerplate
            URLS: |
                [
                    { url: '/docs/server.yaml', name: 'boilerplate' },
                ]
        volumes:
            - ./api:/usr/share/nginx/html/docs/

    boilerplate-postgres:
        image: postgres:17.4
        container_name: boilerplate-postgres
        environment:
            POSTGRES_DB: boilerplate
            POSTGRES_USER: boilerplate_user
            POSTGRES_PASSWORD: boilerplate_password
        ports:
            - '35432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        restart: unless-stopped
        networks:
            - boilerplate-network
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U boilerplate_user -d boilerplate']
            interval: 10s
            timeout: 5s
            retries: 5

    boilerplate-postgres-exporter:
        image: prometheuscommunity/postgres-exporter:latest
        container_name: boilerplate-postgres-exporter
        environment:
            - DATA_SOURCE_NAME=postgresql://boilerplate_user:boilerplate_password@boilerplate-postgres:5432/boilerplate?sslmode=disable
        ports:
            - '39187:9187'
        restart: unless-stopped
        networks:
            - boilerplate-network
        depends_on:
            boilerplate-postgres:
                condition: service_healthy

    boilerplate-redis:
        image: redis:7-alpine
        container_name: boilerplate-redis
        ports:
            - '36379:6379'
        volumes:
            - redis_data:/data
        restart: unless-stopped
        networks:
            - boilerplate-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5

    boilerplate-redis-exporter:
        image: oliver006/redis_exporter:latest
        container_name: boilerplate-redis-exporter
        environment:
            - REDIS_ADDR=boilerplate-redis:6379
        ports:
            - '39121:9121'
        restart: unless-stopped
        networks:
            - boilerplate-network
        depends_on:
            boilerplate-redis:
                condition: service_healthy

    boilerplate-prometheus:
        image: prom/prometheus:latest
        container_name: boilerplate-prometheus
        ports:
            - '39090:9090'
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        restart: unless-stopped
        networks:
            - boilerplate-network
        depends_on:
            - boilerplate-server

    boilerplate-grafana:
        image: grafana/grafana:latest
        container_name: boilerplate-grafana
        ports:
            - '33000:3000'
        environment:
            - GF_SECURITY_ADMIN_USER=boilerplate-admin
            - GF_SECURITY_ADMIN_PASSWORD=boilerplate-admin-password
            - GF_USERS_ALLOW_SIGN_UP=false
        volumes:
            - grafana_data:/var/lib/grafana
            - ./grafana/provisioning:/etc/grafana/provisioning
        restart: unless-stopped
        networks:
            - boilerplate-network
        depends_on:
            - boilerplate-prometheus

volumes:
    postgres_data:
    redis_data:
    prometheus_data:
    grafana_data:

networks:
    boilerplate-network:
        driver: bridge
