// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWbW/bNhD+KwS7Dy3qWLJsx6mAfei6bu22bkbjYdjmQqCps8SOIlny1MYL/N8HUrJl",
	"x1FiFAOCWDrePffci+54S7mujFag0NH0ljpeQsXC4/XGIVRvgEksX5XA/3kPzmjlwB/CDauMDI8O7GfB",
	"IdjkDNmKeRW0NQyohVy45mU7oCgqcMgqQ1OaxMnkIh5dxKNFHKfh7y+6HVBjtQGLosE7xP7Gwpqm9EnU",
	"MY5aulEv1+sdwLH7W5qD41YYFFrRlHJvQ7wCHdC1thVDmvpo4KIV4sYATalDK1RBt1sf26daWMhp+nfH",
	"89DLh72VXn0Ejp7D40TT2zs56HJ6l7VwZHdIygBJmkAMcw7yjvVKawlM0e2+IvdAhZMzce6Ev6e4wz8N",
	"fTugDnhtBW6ufdGa2L4DZsG+rLH0b6vw9sMu/T/9saCDpiOD83DakSkRDd16YKHW+jSklRYSrJEMgbyc",
	"vyXfa15XoJCF8wGVgkPbzYoFD+/eeoe1lS26S6NIG1BO15bDUNsiao1c5HVDT6GEU2d0QD+DdQ2ReBgP",
	"Y6/ssZgRNKXjIBpQw7AMiYiavPvHArC3Qct9ofU6vPnGA0uYykkOBlQOigtwQxq82RDr25ym9KDlQpWa",
	"rgu+kzj2P1wrBBV8M2Ok4ME4+ug8gd1k+OoPsanUcVC//dz0RV1VzG580g+azxeaFS58XQGUfvDKUQVo",
	"BXe9mSoAQ2bmVleAJdSOtCbk6YEsIj9atmaKPbsnV0zlEt61jh7NFsINRkYyoY4mI31C3rz+ZU4KnRU8",
	"y+vGQeaAa5U78pK0ce9K+YVJGaYNMax2QJ461OYCS7j4oq3Mn5EdBBGKFMyuWAGEaymBBynfcAluuFRP",
	"yOLP+es+v63Xpbr//PZTzRQKCd8uabykWxIP4zgex+PLZHqWzTCZfpVZZzWZvphOkvOsZnuzZJRMxuPx",
	"OWajM20yV1eN3tXVrDeMjOtaIRn7xO8Lrq2uUShw5Ne6WoH1RT4QYsmQ8NpaUCg3BG6Ew+PKdboFqwto",
	"nHfCUXLoroLKIUOXlcBMxqTUPFtt8Mi7PyKNMCgwhDzMDYdCSt9TtYMjDv2oHaV+nfFwNJnOkit4Hl/2",
	"c3Ub9xBTvUImFORkbXVFmjnwAMcOrY9hpzEbXo4nLyaTI35+6md+s4FDlwmVraUoSjwg92axmJOdxkEJ",
	"VyBU0YzjvGPYh9fS6zuO94SM1Rycy7ip9/2GGpkki/C/du30b3JDXs1/D9cY4gwo9FVtrTpO/ZChkcEu",
	"Vb9KPJwmJ+QsOJGDQp9rbTdtgt+3UtJIiRP/gicUTk/p3A/SJuphpWQ4mc4u4Xk8W6rdjSFsqruXtsc3",
	"ULUf+vcuH99JtTtjSzeKx1v6dNFcB63/ZSl3F/Lt6d3r8bhbvv2bN9zffBRefjduP07k0dUpjaIgLLXD",
	"dHwVX8V0+2H7XwAAAP//5qpzBm4MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
